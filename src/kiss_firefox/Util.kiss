(import haxe.Constraints)
(import kiss_firefox.Message)
(import kiss_firefox.API)

(function sendMessage [:String type :Array<Dynamic> data]
    (API.browser.runtime.sendMessage (objectWith type data)))

(collectBlocks onMessageCase)

(defMacro onMessage [type dataList &body body]
    `(onMessageCase (_ ,type [,@dataList] ,@body)))

(defReaderMacro &eof "" [stream]
    (let [onMessageCases (getCollectedExps "onMessageCase")]
        `(API.browser.runtime.onMessage.addListener ->[:Message message sender :Function sendResponse]
            (case ~message
                ,@(for messageCase onMessageCases
                    `((object type ,(first (Prelude.callArgs messageCase)) data ,(second (Prelude.callArgs messageCase)))
                        ,@(.slice (Prelude.callArgs messageCase) 2)))
                (never otherwise)))))